<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--为这个mapper指定一个唯一的namespace,namespace的值习惯上设置成包名+sql映射文件名，这样就能保证namespace的唯一性-->
<mapper namespace = "mapping.userMapper">
    <!--在select标签中编写查询的SQL语句，设置select标签的id属性为getUser,id属性值必须是唯一的
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="domain.User"就表示将查询结果封装成一个User类的对象返回-->
    <!--根据id查询用户信息-->
    <!--
       id:唯一标识，一个statement
       parameterType：输入参数的类型，通过#{}接收parameterType输入的参数
       resultType：输出参数的类型，不管返回的是单条数据还是多条数据，指定单条记录映射的pojo类型
       #{}：表示一个占位符，如果parameterType是简单类型（例如int，String），#{}中的名称随意
                          如果parameterType不是简单类型（例如User），#{}中的名称要与实体类的属性名对应
    -->
    <select id="getUser" parameterType="int" resultType="domain.User">
        select * from users where id =#{id1}
    </select>

    <!--创建用户-->
    <insert id="addUser" parameterType="User">
        insert into users(name,age) values(#{name},#{age})
    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="int">
        delete from users where id=#{id}
    </delete>

    <!--修改用户-->
    <update id="updateUser" parameterType="User">
        update users set name=#{name},age=#{age} where id=#{id}
    </update>

    <!--查询全部用户-->
    <select id="getAllUsers" resultType="User">
        select * from users
    </select>

    <!--
       MyBatis调用存储过程
    -->
    <!--
       查询得到男性或女性的数量，如果传入的是0就女性否则男性
    -->
    <select id="getUserCount" parameterMap="getUserCountMap" statementType="CALLABLE">
        CALL mybatis.ges_user_count(?,?)
    </select>
    <parameterMap type="java.util.Map" id="getUserCountMap">
        <parameter property="sexid" mode="IN" jdbcType="INTEGER"/>
        <parameter property="usercount" mode="OUT" jdbcType="INTEGER"/>
    </parameterMap>

    <!--
       MyBatis动态SQL
    -->
    <sql id="query_user_where">
        <if test="name!=null and name!=''">
            and NAME like '%${name}%'
        </if>

        <if test="age!=null and age!=''">
            and age = #{age}
        </if>
    </sql>
    <!--自定义查询条件查询用户信息-->
    <!--parameterType：指定包装类型-->
    <!--%${id}% :其中id是User中的属性，通过OGNL来获取属性的值-->
    <select id="findUserList" parameterType="User" resultType="User">
        select * from users
        <!--where标签相当于where关键字，可以自动的去除后面的第一个and-->
        <where>
            <!--如果User中传入name查询条件，则进行sql拼接-->
            <if test="name!=null and name!=''">
                 NAME like '%${name}%'
            </if>
            <!--如果User中传入age查询条件，则进行sql拼接-->
            <if test="age!=null and age!=''">
                and age = #{age}
            </if>
        </where>
    </select>

    <!--
       输出简单类型
       功能：自定义查询条件，返回查询记录个数，通常用于实现查询分页
    -->
    <select id="findUserCount" parameterType="User" resultType="int">
        select count(*) from users
        <trim prefix="where" prefixOverrides="AND|OR">
            <!--引用sql片段，如果sql片段和引用处不在同一个mapper.xml，则必须在前面加上namespace-->
            <include refid="query_user_where"></include>
        </trim>
    </select>

    <select id="findUserList1" parameterType="User" resultType="User">
        select * from users
        <!--where标签相当于where关键字，可以自动的去除后面的第一个and-->
        <where>
            <!--如果User中传入name查询条件，则进行sql拼接-->
            <if test="name!=null and name!=''">
                NAME like '%${name}%'
            </if>
            <!--如果User中传入age查询条件，则进行sql拼接-->
            <if test="age!=null and age!=''">
                and age = #{age}
            </if>

            <!--根据id集合查询用户信息-->
            <!--最后拼接的效果
            select * from users where NAME like '%l%' and age=23 and id in(1,5)
            collection:集合的属性
            item：每次循环取到的对象
            open:开始循环时要拼接的串
            separator：每两次循环中间要拼接的串
            close：结束循环要拼接的串
            -->
            <foreach collection="ids" item="id" open="and id in (" separator="," close=")">
                #{id}
            </foreach>
        </where>
    </select>


</mapper>